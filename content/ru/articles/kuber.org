---
title: "Kuber"
date: 2024-03-20T15:50:48+07:00
draft: false
---

* Введение
Как и во многих технологиях нужно уметь устанавливать и настраивать технологию. И нужно уметь пользоваться.
Есть админы и есть пользователи.
Есть настройка и есть использование

Важно понимать зачем и сразу практиковаться.

Сложности:
1. Выделить время, силы и подобрать ресурсы для обучения
2. Понимать полностью ли ты покрыл изучаемую тему
3. Быть уверенным в актуальности и полноте изучаемой информации
4. Найти наиболее качественный курс в плане подачи материала, максимально легкой для усвоения
* Базовые концепции
** Зачем? В чем проблема
Кубер - это по большому счету менеджер контейнеризированных приложений.
Деплой на различного рода окружения

*Проблемa:*
Много микросервисов, рост числа контейнеров. И все это на разных окружениях.
Нужна оркестрация все этого добра.


Какие есть фичи:
- Высокая доступность системы. Минимизация даунтайма
- Масштабируемость, подстройка под текущую нагрузку
- Disaster recovery
** Как она решается этим инструментом?
** Архитектура
По крайней мере одна мастер-нода и несколько рабочих-нод, на каждой из которых запущен kubelet процесс (агент?).
На каждой рабочей ноде может быть запущенно несколько докер контейнеров. И виртуальная сеть для взаимодействия между ними.
Она объединяет весь кластер в одну очень мощную, надежную и доступную машину

Мастер-нода:
- Api-Server
  Входная точка для к8с кластера
- Controller manager
  следит за всем, что происходит в кластере. Предпринимает действия если текущее состояние не соотвествует желаемому.
- Scheduler
  развертывание контейнеров на определенных нодах, в зависимости от нагрузки и доступных ресурсов
- etcd
  хранилище, в котором содержится текущее состояние к8с кластера, его мозг, конфигурация, текущее состояние
  каждой ноды и каждого контейнера. Необходим для восстановления в случае сбоев

*** Node & Pod
Нода - Виртуальная или физическая машина
Под - абстракция вокруг контейнера, находится внутри ноды. Подразумевается, что в поде запущенно только одно приложение

Каждый под получает свой IP-адрес. Поды могут помирать довольно легко, и новый поднятый под будет иметь новый адрес.

*Сервис*
В отличии от IP-адреса, "сервис" это постоянный IP-адрес для пода.
Существуют "внешние сервисы", по которым есть доступ извне.
В том числе сервис является load-балансером

*Ingress*
Слой абстракции над сервисом, запрос сначала попадает в ingress, а уже потом перенаправляется в сервис
*** ConfigMap & Secret
ConfigMap - внешняя конфигурация нашей системы (урлы до базы данных и других сервисов, пароли, конфигурации)
Эта конфигурация доступна в самом поде и может быть обновлена на лету

Secret - для хранения значений паролей
*** Volume
Хранилище, к которому под может подключаться и использовать, может быть локально на ноде или распологаться где-то вовне.
к8с не хранит данные, это вне его зоны ответственности.
*** Blueprint & Deployment
Описание под, которые потом деплоятся, сколько реплик нужно и тому подобное.

Мы не оперируем подами в к8с, а работаем с деплойментами
Деплоймент - абстракция над подами. Управление скейлингом и репликами

Простые поды реплецируются легко, с бд дело обстоит иначе (запись и чтение) этим занимается компонет statefulSet.
Тем не менее это сделать не так просто и многие реализуют это за пределами к8с.
*** Configuration
Имеет Yaml формат, состоит из:
- метаданных
- спецификации
  Спецификация будет своя для каждого конкретного вида конфигурации
- Статус. Он автоматически создается и добавляется самим к8с

*Labels*
Каждый компонент может быть отмечен лейблом, который потом можно использовать для выбора цели операции
** Основные сущности
** Как оно работает
** Доступ и взаимодействие
kubectl
** Манифесты
** Отладка и дебаг
** Частые ошибки
** Helm charts
** Инструменты
+ Minikube для локальной разработки и тестирования
+ Kubectl консольная интерфейс для взаимодействия с кластером
* Что должен уметь пользователь
** Деплой компонент
- Деплой и запуск приложений
- Реплики
- Масштабирование
- Отличное понимание манифестов
** Стратегии деплоя
- Canary
- Blue/Green
- Rolling updates / Rollbacks
** CI/CD Integration
** Application networking
* Что должен уметь админ
+ Managed and self-managed service
  Managed - управляемые внешним провайдером (Амазон, Микрософт, Гугл)
+ Сеть
  Как компоненты взаимодействуют друг с другом
  - Ingress
  - Network policies
  - Pod to Pod (to Service) communication
  - Soft/Hard network isolation
+ Cluster access management
  - Role-based access control
+ Backup and secure data
+ K8s операторы
+ Мониторинг
  Нельзя починить того, чего ты не видишь
+ Лучшие практики
* Словарь
Нода, под, деплоймент, сервис, скедулер, к8с
* Ссылки на ресурсы
- [[https://www.youtube.com/watch?v=S8eX0MxfnB4&ab_channel=TechWorldwithNana][Kubernetes Roadmap - Complete Step-by-Step Learning Path (TechWorld with Nana)]] 


